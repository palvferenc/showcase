{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1","program":"/home/palvferenc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=52e0cbffea653436","-C","extra-filename=-52e0cbffea653436","--out-dir","/home/palvferenc/dev/showcase/backend/palvferenc_showcase_services/target/rls/debug/deps","-L","dependency=/home/palvferenc/dev/showcase/backend/palvferenc_showcase_services/target/rls/debug/deps","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/palvferenc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/palvferenc/dev/showcase/backend/palvferenc_showcase_services/target/rls/debug/deps/libindexmap-52e0cbffea653436.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[10304475649173908676,16378976058047964245]},"crate_root":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src","external_crates":[{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14029911340352309513,3694302842271320647]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5366521311420338507,5001693844293236078]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16078967021793905033,18044181950654841110]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3256375668792353550,7694578384779899277]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[17967524032803306908,5163911630854790873]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7486411228932131176,10611882423765912104]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8951493940525711481,6598059053846807751]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[6080538021290120973,12135415365643254465]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[2404946192574906823,11198495443784404083]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[8156052144428984436,15205012491124168822]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[11527475684179663565,15577722846879460413]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4615572763888095747,7180296191060376175]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16051702409717455556,18428390842256153874]}},{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[14083788917415871355,15092499333930635081]}}],"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":0,"byte_end":4467,"line_start":1,"line_end":164,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":11344,"byte_end":11355,"line_start":9,"line_end":9,"column_start":23,"column_end":34},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":2894,"byte_end":2904,"line_start":90,"line_end":90,"column_start":21,"column_end":31},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1065},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":2919,"byte_end":2927,"line_start":91,"line_end":91,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1136},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":2942,"byte_end":2950,"line_start":92,"line_end":92,"column_start":14,"column_end":22},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":0,"byte_end":4467,"line_start":1,"line_end":164,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":17},{"krate":0,"index":26},{"krate":0,"index":52},{"krate":0,"index":63},{"krate":0,"index":646},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1166},{"krate":0,"index":1171},{"krate":0,"index":1169},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1172},{"krate":0,"index":1186},{"krate":0,"index":1182},{"krate":0,"index":1178},{"krate":0,"index":1036},{"krate":0,"index":1047}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/equivalent.rs","byte_start":8154,"byte_end":8164,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/equivalent.rs","byte_start":8252,"byte_end":8262,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"fn (&self, key: &K) -> bool","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":8570,"byte_end":8583,"line_start":6,"line_end":6,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9131,"byte_end":9142,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9154,"byte_end":9157,"line_start":21,"line_end":21,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":35},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9168,"byte_end":9173,"line_start":22,"line_end":22,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9245,"byte_end":9258,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, &mut Self::Key, &mut Self::Value)>","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9694,"byte_end":9701,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"fn <F> (&mut self, keep: F) -> ()","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":9993,"byte_end":10009,"line_start":46,"line_end":46,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"fn (&self) -> PrivateMarker","parent":{"krate":0,"index":33},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":1054},{"krate":0,"index":1059},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":1065},{"krate":0,"index":1071},{"krate":0,"index":1076},{"krate":0,"index":1082},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":156},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":169},{"krate":0,"index":181},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":205},{"krate":0,"index":217},{"krate":0,"index":222},{"krate":0,"index":230},{"krate":0,"index":247},{"krate":0,"index":252},{"krate":0,"index":260},{"krate":0,"index":270},{"krate":0,"index":275},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":351},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":407},{"krate":0,"index":412},{"krate":0,"index":417},{"krate":0,"index":422},{"krate":0,"index":427},{"krate":0,"index":432},{"krate":0,"index":437},{"krate":0,"index":442},{"krate":0,"index":447},{"krate":0,"index":452},{"krate":0,"index":457},{"krate":0,"index":462},{"krate":0,"index":467},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":482},{"krate":0,"index":487},{"krate":0,"index":492},{"krate":0,"index":497},{"krate":0,"index":502},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":517},{"krate":0,"index":522},{"krate":0,"index":527},{"krate":0,"index":532},{"krate":0,"index":536},{"krate":0,"index":540},{"krate":0,"index":545},{"krate":0,"index":549},{"krate":0,"index":553},{"krate":0,"index":558},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":575},{"krate":0,"index":583},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":601},{"krate":0,"index":608},{"krate":0,"index":614},{"krate":0,"index":620},{"krate":0,"index":628},{"krate":0,"index":633},{"krate":0,"index":642}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1065},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":18908,"byte_end":18916,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"cfg(has_std)","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":18881,"byte_end":18896,"line_start":296,"line_end":296,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22231,"byte_end":22234,"line_start":426,"line_end":426,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22447,"byte_end":22460,"line_start":434,"line_end":434,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22744,"byte_end":22768,"line_start":444,"line_end":444,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"fn (n: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":23671,"byte_end":23674,"line_start":474,"line_end":474,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":23832,"byte_end":23840,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":23945,"byte_end":23956,"line_start":486,"line_end":486,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":24151,"byte_end":24157,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":24291,"byte_end":24299,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":199},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":26887,"byte_end":26895,"line_start":597,"line_end":597,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":202},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":26978,"byte_end":26984,"line_start":599,"line_end":599,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V>)","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":195},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":26814,"byte_end":26819,"line_start":595,"line_end":595,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":202}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27111,"byte_end":27120,"line_start":604,"line_end":604,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27373,"byte_end":27387,"line_start":612,"line_end":612,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, call: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time (amortized average).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27624,"byte_end":27627,"line_start":622,"line_end":622,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27879,"byte_end":27884,"line_start":630,"line_end":630,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":28111,"byte_end":28121,"line_start":638,"line_end":638,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":28633,"byte_end":28643,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29354,"byte_end":29367,"line_start":679,"line_end":679,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29528,"byte_end":29531,"line_start":687,"line_end":687,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29582,"byte_end":29585,"line_start":690,"line_end":690,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29662,"byte_end":29669,"line_start":693,"line_end":693,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":30009,"byte_end":30014,"line_start":704,"line_end":704,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":30069,"byte_end":30077,"line_start":707,"line_end":707,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":30248,"byte_end":30254,"line_start":712,"line_end":712,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":30497,"byte_end":30503,"line_start":719,"line_end":719,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":30918,"byte_end":30929,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":31347,"byte_end":31359,"line_start":741,"line_end":741,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":31578,"byte_end":31590,"line_start":748,"line_end":748,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":32004,"byte_end":32021,"line_start":759,"line_end":759,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":32456,"byte_end":32474,"line_start":770,"line_end":770,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":252},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33002,"byte_end":33013,"line_start":788,"line_end":788,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33175,"byte_end":33178,"line_start":796,"line_end":796,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33229,"byte_end":33237,"line_start":799,"line_end":799,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33353,"byte_end":33358,"line_start":803,"line_end":803,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33417,"byte_end":33423,"line_start":806,"line_end":806,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34772,"byte_end":34777,"line_start":855,"line_end":855,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34949,"byte_end":34956,"line_start":862,"line_end":862,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":36533,"byte_end":36539,"line_start":906,"line_end":906,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"fn (&mut self, key: K, value: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":38091,"byte_end":38102,"line_start":942,"line_end":942,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"fn (&mut self, key: K, value: V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":38652,"byte_end":38657,"line_start":959,"line_end":959,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":38871,"byte_end":38875,"line_start":965,"line_end":965,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"fn (&self) -> Iter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":39065,"byte_end":39073,"line_start":972,"line_end":972,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":39266,"byte_end":39270,"line_start":979,"line_end":979,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"fn (&self) -> Keys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":39451,"byte_end":39457,"line_start":986,"line_end":986,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"fn (&self) -> Values<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":39676,"byte_end":39686,"line_start":994,"line_end":994,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map,\n in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":39935,"byte_end":39947,"line_start":1003,"line_end":1003,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"fn <Q> (&self, key: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":40233,"byte_end":40236,"line_start":1014,"line_end":1014,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"fn <Q> (&self, key: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":40424,"byte_end":40432,"line_start":1022,"line_end":1022,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"fn <Q> (&self, key: &Q) -> Option<(usize, &K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":40752,"byte_end":40759,"line_start":1034,"line_end":1034,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":40918,"byte_end":40930,"line_start":1041,"line_end":1041,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, &K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":42230,"byte_end":42236,"line_start":1084,"line_end":1084,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":42781,"byte_end":42792,"line_start":1101,"line_end":1101,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":43367,"byte_end":43383,"line_start":1118,"line_end":1118,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":44119,"byte_end":44131,"line_start":1140,"line_end":1140,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"fn <Q> (&mut self, key: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":44702,"byte_end":44719,"line_start":1157,"line_end":1157,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"fn <Q> (&mut self, key: &Q) -> Option<(usize, K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":45150,"byte_end":45153,"line_start":1172,"line_end":1172,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"fn (&mut self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":45501,"byte_end":45507,"line_start":1183,"line_end":1183,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut keep: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":46139,"byte_end":46148,"line_start":1208,"line_end":1208,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":46657,"byte_end":46664,"line_start":1223,"line_end":1223,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":46965,"byte_end":46974,"line_start":1234,"line_end":1234,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"fn <F> (mut self, mut cmp: F) -> IntoIter<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":47365,"byte_end":47370,"line_start":1246,"line_end":1246,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"fn (&mut self, range: RangeFull) -> Drain<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap`, returning all key-value pairs as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":47831,"byte_end":47840,"line_start":1268,"line_end":1268,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"fn (&self, index: usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":48098,"byte_end":48111,"line_start":1277,"line_end":1277,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"fn (&mut self, index: usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":48612,"byte_end":48629,"line_start":1290,"line_end":1290,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"fn (&mut self, index: usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":49350,"byte_end":49368,"line_start":1312,"line_end":1312,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"fn (&mut self, index: usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":67843,"byte_end":67847,"line_start":1818,"line_end":1818,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68966,"byte_end":68972,"line_start":1862,"line_end":1862,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":436}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70122,"byte_end":70131,"line_start":1906,"line_end":1906,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":466}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70876,"byte_end":70880,"line_start":1935,"line_end":1935,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":486}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":512},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72022,"byte_end":72029,"line_start":1979,"line_end":1979,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":516}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":532},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72834,"byte_end":72842,"line_start":2008,"line_end":2008,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":535}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":553},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73813,"byte_end":73818,"line_start":2044,"line_end":2044,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":557}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":646},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":668},{"krate":0,"index":1136},{"krate":0,"index":1140},{"krate":0,"index":670},{"krate":0,"index":679},{"krate":0,"index":683},{"krate":0,"index":687},{"krate":0,"index":696},{"krate":0,"index":760},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":788},{"krate":0,"index":792},{"krate":0,"index":796},{"krate":0,"index":800},{"krate":0,"index":804},{"krate":0,"index":808},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":826},{"krate":0,"index":832},{"krate":0,"index":838},{"krate":0,"index":844},{"krate":0,"index":850},{"krate":0,"index":854},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":874},{"krate":0,"index":880},{"krate":0,"index":887},{"krate":0,"index":892},{"krate":0,"index":897},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":915},{"krate":0,"index":920},{"krate":0,"index":925},{"krate":0,"index":930},{"krate":0,"index":936},{"krate":0,"index":947},{"krate":0,"index":953},{"krate":0,"index":959},{"krate":0,"index":965},{"krate":0,"index":970},{"krate":0,"index":980},{"krate":0,"index":985},{"krate":0,"index":990},{"krate":0,"index":995},{"krate":0,"index":1003},{"krate":0,"index":1011},{"krate":0,"index":1019}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90089,"byte_end":90097,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1139}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"cfg(has_std)","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90062,"byte_end":90077,"line_start":67,"line_end":67,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91254,"byte_end":91257,"line_start":118,"line_end":118,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91495,"byte_end":91508,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"fn (n: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91795,"byte_end":91819,"line_start":140,"line_end":140,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"fn (n: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92105,"byte_end":92108,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92265,"byte_end":92273,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92382,"byte_end":92393,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92615,"byte_end":92621,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92754,"byte_end":92762,"line_start":182,"line_end":182,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":93015,"byte_end":93020,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":93118,"byte_end":93125,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" FIXME Not implemented fully yet\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":93559,"byte_end":93565,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":94103,"byte_end":94114,"line_start":225,"line_end":225,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"fn (&mut self, value: T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":94513,"byte_end":94517,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":94782,"byte_end":94792,"line_start":248,"line_end":248,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Difference<'a, T, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":95241,"byte_end":95261,"line_start":263,"line_end":263,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> SymmetricDifference<'a, T, S, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":95701,"byte_end":95713,"line_start":278,"line_end":278,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Intersection<'a, T, S2>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":96155,"byte_end":96160,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"fn <'a, S2> (&'a self, other: &'a IndexSet<T, S2>) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":96494,"byte_end":96502,"line_start":304,"line_end":304,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":96795,"byte_end":96798,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":96999,"byte_end":97007,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"fn <Q> (&self, value: &Q) -> Option<(usize, &T)>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":97378,"byte_end":97385,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":97961,"byte_end":97967,"line_start":352,"line_end":352,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":98512,"byte_end":98523,"line_start":368,"line_end":368,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":99077,"byte_end":99089,"line_start":384,"line_end":384,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":99575,"byte_end":99579,"line_start":399,"line_end":399,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":100148,"byte_end":100157,"line_start":416,"line_end":416,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":100752,"byte_end":100762,"line_start":433,"line_end":433,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":101282,"byte_end":101298,"line_start":447,"line_end":447,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"fn <Q> (&mut self, value: &Q) -> Option<(usize, T)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":101826,"byte_end":101843,"line_start":461,"line_end":461,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"fn <Q> (&mut self, value: &Q) -> Option<(usize, T)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":102116,"byte_end":102119,"line_start":471,"line_end":471,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":102464,"byte_end":102470,"line_start":482,"line_end":482,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"fn <F> (&mut self, mut keep: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":102715,"byte_end":102719,"line_start":492,"line_end":492,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":102980,"byte_end":102987,"line_start":502,"line_end":502,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"fn <F> (&mut self, mut compare: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":103290,"byte_end":103299,"line_start":513,"line_end":513,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"fn <F> (self, mut cmp: F) -> IntoIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":103632,"byte_end":103637,"line_start":524,"line_end":524,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"fn (&mut self, range: RangeFull) -> Drain<T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet`, returning all values as a drain iterator.\n Keeps the allocated memory for reuse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":103933,"byte_end":103942,"line_start":537,"line_end":537,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"fn (&self, index: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":104419,"byte_end":104436,"line_start":550,"line_end":550,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":104918,"byte_end":104936,"line_start":563,"line_end":563,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"fn (&mut self, index: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":769},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105365,"byte_end":105373,"line_start":575,"line_end":575,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":771}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106262,"byte_end":106266,"line_start":611,"line_end":611,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":787}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":808},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107280,"byte_end":107285,"line_start":654,"line_end":654,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":811}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109597,"byte_end":109608,"line_start":767,"line_end":767,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109983,"byte_end":109992,"line_start":779,"line_end":779,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":110260,"byte_end":110271,"line_start":787,"line_end":787,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"fn <S2> (&self, other: &IndexSet<T, S2>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":110697,"byte_end":110707,"line_start":802,"line_end":802,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":902},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":112276,"byte_end":112288,"line_start":869,"line_end":869,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":930},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":113897,"byte_end":113916,"line_start":936,"line_end":936,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":935}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":965},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":115454,"byte_end":115459,"line_start":1001,"line_end":1001,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":969}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1048},"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":4223,"byte_end":4228,"line_start":157,"line_end":157,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/equivalent.rs","byte_start":8336,"byte_end":8337,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":10177,"byte_end":10185,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12104,"byte_end":12113,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12430,"byte_end":12439,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12466,"byte_end":12475,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12572,"byte_end":12581,"line_start":62,"line_end":62,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12809,"byte_end":12818,"line_start":71,"line_end":71,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":13082,"byte_end":13091,"line_start":84,"line_end":84,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14001,"byte_end":14004,"line_start":111,"line_end":111,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14102,"byte_end":14105,"line_start":118,"line_end":118,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14329,"byte_end":14332,"line_start":127,"line_end":127,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":16977,"byte_end":16991,"line_start":235,"line_end":235,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":19581,"byte_end":19589,"line_start":323,"line_end":323,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":20505,"byte_end":20513,"line_start":360,"line_end":360,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22156,"byte_end":22164,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22562,"byte_end":22570,"line_start":439,"line_end":439,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":24572,"byte_end":24584,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27027,"byte_end":27032,"line_start":602,"line_end":602,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":28923,"byte_end":28928,"line_start":666,"line_end":666,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29491,"byte_end":29504,"line_start":686,"line_end":686,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":32626,"byte_end":32639,"line_start":775,"line_end":775,"column_start":65,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33140,"byte_end":33151,"line_start":795,"line_end":795,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34104,"byte_end":34115,"line_start":830,"line_end":830,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34310,"byte_end":34318,"line_start":838,"line_end":838,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":47659,"byte_end":47667,"line_start":1262,"line_end":1262,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":49993,"byte_end":50005,"line_start":1332,"line_end":1332,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":67949,"byte_end":67953,"line_start":1822,"line_end":1822,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68072,"byte_end":68076,"line_start":1828,"line_end":1828,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68233,"byte_end":68237,"line_start":1834,"line_end":1834,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68392,"byte_end":68396,"line_start":1841,"line_end":1841,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68562,"byte_end":68566,"line_start":1849,"line_end":1849,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69063,"byte_end":69069,"line_start":1866,"line_end":1866,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69190,"byte_end":69196,"line_start":1872,"line_end":1872,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69360,"byte_end":69366,"line_start":1878,"line_end":1878,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69521,"byte_end":69527,"line_start":1885,"line_end":1885,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69697,"byte_end":69703,"line_start":1893,"line_end":1893,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70225,"byte_end":70234,"line_start":1910,"line_end":1910,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70359,"byte_end":70368,"line_start":1916,"line_end":1916,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70532,"byte_end":70541,"line_start":1922,"line_end":1922,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70971,"byte_end":70975,"line_start":1939,"line_end":1939,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71100,"byte_end":71104,"line_start":1945,"line_end":1945,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71263,"byte_end":71267,"line_start":1951,"line_end":1951,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71422,"byte_end":71426,"line_start":1958,"line_end":1958,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71604,"byte_end":71608,"line_start":1966,"line_end":1966,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72123,"byte_end":72130,"line_start":1983,"line_end":1983,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72262,"byte_end":72269,"line_start":1989,"line_end":1989,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72431,"byte_end":72438,"line_start":1995,"line_end":1995,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72926,"byte_end":72934,"line_start":2012,"line_end":2012,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73052,"byte_end":73060,"line_start":2018,"line_end":2018,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73216,"byte_end":73224,"line_start":2024,"line_end":2024,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73345,"byte_end":73353,"line_start":2030,"line_end":2030,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73948,"byte_end":73953,"line_start":2052,"line_end":2052,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":74075,"byte_end":74080,"line_start":2058,"line_end":2058,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":74683,"byte_end":74691,"line_start":2086,"line_end":2086,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75017,"byte_end":75025,"line_start":2102,"line_end":2102,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75596,"byte_end":75604,"line_start":2124,"line_end":2124,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75978,"byte_end":75986,"line_start":2140,"line_end":2140,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":76570,"byte_end":76578,"line_start":2159,"line_end":2159,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77311,"byte_end":77319,"line_start":2180,"line_end":2180,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77715,"byte_end":77723,"line_start":2194,"line_end":2194,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77957,"byte_end":77965,"line_start":2204,"line_end":2204,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":78330,"byte_end":78338,"line_start":2221,"line_end":2221,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90272,"byte_end":90280,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90749,"byte_end":90757,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91182,"byte_end":91190,"line_start":116,"line_end":116,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91623,"byte_end":91631,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92829,"byte_end":92837,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":103773,"byte_end":103781,"line_start":531,"line_end":531,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105439,"byte_end":105447,"line_start":579,"line_end":579,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":774},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105544,"byte_end":105552,"line_start":585,"line_end":585,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105696,"byte_end":105704,"line_start":591,"line_end":591,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105807,"byte_end":105815,"line_start":597,"line_end":597,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106346,"byte_end":106350,"line_start":615,"line_end":615,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106463,"byte_end":106467,"line_start":621,"line_end":621,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106623,"byte_end":106627,"line_start":627,"line_end":627,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106721,"byte_end":106725,"line_start":633,"line_end":633,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106875,"byte_end":106879,"line_start":641,"line_end":641,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":807}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107364,"byte_end":107369,"line_start":658,"line_end":658,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107474,"byte_end":107479,"line_start":664,"line_end":664,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1165}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107795,"byte_end":107803,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108066,"byte_end":108074,"line_start":696,"line_end":696,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108369,"byte_end":108377,"line_start":709,"line_end":709,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108628,"byte_end":108636,"line_start":720,"line_end":720,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108917,"byte_end":108925,"line_start":731,"line_end":731,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109155,"byte_end":109163,"line_start":743,"line_end":743,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109377,"byte_end":109385,"line_start":754,"line_end":754,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109452,"byte_end":109460,"line_start":761,"line_end":761,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":869},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":110813,"byte_end":110823,"line_start":807,"line_end":807,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111261,"byte_end":111271,"line_start":828,"line_end":828,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111585,"byte_end":111595,"line_start":843,"line_end":843,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111765,"byte_end":111775,"line_start":852,"line_end":852,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":112394,"byte_end":112406,"line_start":874,"line_end":874,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":112843,"byte_end":112855,"line_start":895,"line_end":895,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":113168,"byte_end":113180,"line_start":910,"line_end":910,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":113352,"byte_end":113364,"line_start":919,"line_end":919,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114045,"byte_end":114064,"line_start":940,"line_end":940,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114523,"byte_end":114542,"line_start":964,"line_end":964,"column_start":45,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114747,"byte_end":114766,"line_start":975,"line_end":975,"column_start":31,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114935,"byte_end":114954,"line_start":983,"line_end":983,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":115563,"byte_end":115568,"line_start":1005,"line_end":1005,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":115995,"byte_end":116000,"line_start":1028,"line_end":1028,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":116173,"byte_end":116178,"line_start":1038,"line_end":1038,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":116323,"byte_end":116328,"line_start":1046,"line_end":1046,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3147,"byte_end":3156,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3248,"byte_end":3257,"line_start":108,"line_end":108,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3345,"byte_end":3354,"line_start":114,"line_end":114,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3556,"byte_end":3562,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":82,"line_end":82,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":2716,"byte_end":2719,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":646}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/equivalent.rs","byte_start":8336,"byte_end":8337,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":0,"index":19}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/mutable_keys.rs","byte_start":10177,"byte_end":10185,"line_start":52,"line_end":52,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1065},"to":{"krate":0,"index":33}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12104,"byte_end":12113,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12430,"byte_end":12439,"line_start":54,"line_end":54,"column_start":19,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":1548}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12466,"byte_end":12475,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12572,"byte_end":12581,"line_start":62,"line_end":62,"column_start":24,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":12809,"byte_end":12818,"line_start":71,"line_end":71,"column_start":35,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":13082,"byte_end":13091,"line_start":84,"line_end":84,"column_start":34,"column_end":43},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14001,"byte_end":14004,"line_start":111,"line_end":111,"column_start":16,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14102,"byte_end":14105,"line_start":118,"line_end":118,"column_start":21,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":14329,"byte_end":14332,"line_start":127,"line_end":127,"column_start":6,"column_end":9},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":16977,"byte_end":16991,"line_start":235,"line_end":235,"column_start":10,"column_end":24},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":19581,"byte_end":19589,"line_start":323,"line_end":323,"column_start":27,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1065},"to":{"krate":0,"index":1047}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":20505,"byte_end":20513,"line_start":360,"line_end":360,"column_start":30,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22156,"byte_end":22164,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":22562,"byte_end":22570,"line_start":439,"line_end":439,"column_start":15,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":24572,"byte_end":24584,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":27027,"byte_end":27032,"line_start":602,"line_end":602,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":28923,"byte_end":28928,"line_start":666,"line_end":666,"column_start":65,"column_end":70},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":195},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":29491,"byte_end":29504,"line_start":686,"line_end":686,"column_start":16,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":32626,"byte_end":32639,"line_start":775,"line_end":775,"column_start":65,"column_end":78},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":33140,"byte_end":33151,"line_start":795,"line_end":795,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34104,"byte_end":34115,"line_start":830,"line_end":830,"column_start":52,"column_end":63},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":252},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":34310,"byte_end":34318,"line_start":838,"line_end":838,"column_start":15,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":47659,"byte_end":47667,"line_start":1262,"line_end":1262,"column_start":15,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":49993,"byte_end":50005,"line_start":1332,"line_end":1332,"column_start":12,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":67949,"byte_end":67953,"line_start":1822,"line_end":1822,"column_start":29,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68072,"byte_end":68076,"line_start":1828,"line_end":1828,"column_start":40,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68233,"byte_end":68237,"line_start":1834,"line_end":1834,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68392,"byte_end":68396,"line_start":1841,"line_end":1841,"column_start":26,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":68562,"byte_end":68566,"line_start":1849,"line_end":1849,"column_start":43,"column_end":47},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":402},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69063,"byte_end":69069,"line_start":1866,"line_end":1866,"column_start":29,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69190,"byte_end":69196,"line_start":1872,"line_end":1872,"column_start":40,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69360,"byte_end":69366,"line_start":1878,"line_end":1878,"column_start":38,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69521,"byte_end":69527,"line_start":1885,"line_end":1885,"column_start":26,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":69697,"byte_end":69703,"line_start":1893,"line_end":1893,"column_start":43,"column_end":49},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":432},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70225,"byte_end":70234,"line_start":1910,"line_end":1910,"column_start":29,"column_end":38},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70359,"byte_end":70368,"line_start":1916,"line_end":1916,"column_start":40,"column_end":49},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70532,"byte_end":70541,"line_start":1922,"line_end":1922,"column_start":38,"column_end":47},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":70971,"byte_end":70975,"line_start":1939,"line_end":1939,"column_start":29,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":482},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71100,"byte_end":71104,"line_start":1945,"line_end":1945,"column_start":40,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":482},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71263,"byte_end":71267,"line_start":1951,"line_end":1951,"column_start":38,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":482},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71422,"byte_end":71426,"line_start":1958,"line_end":1958,"column_start":26,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":482},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":71604,"byte_end":71608,"line_start":1966,"line_end":1966,"column_start":55,"column_end":59},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":482},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72123,"byte_end":72130,"line_start":1983,"line_end":1983,"column_start":29,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72262,"byte_end":72269,"line_start":1989,"line_end":1989,"column_start":40,"column_end":47},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72431,"byte_end":72438,"line_start":1995,"line_end":1995,"column_start":38,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":512},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":72926,"byte_end":72934,"line_start":2012,"line_end":2012,"column_start":25,"column_end":33},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73052,"byte_end":73060,"line_start":2018,"line_end":2018,"column_start":40,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73216,"byte_end":73224,"line_start":2024,"line_end":2024,"column_start":34,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73345,"byte_end":73353,"line_start":2030,"line_end":2030,"column_start":51,"column_end":59},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":73948,"byte_end":73953,"line_start":2052,"line_end":2052,"column_start":29,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":553},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":74075,"byte_end":74080,"line_start":2058,"line_end":2058,"column_start":40,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":553},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":74683,"byte_end":74691,"line_start":2086,"line_end":2086,"column_start":32,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":3900}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75017,"byte_end":75025,"line_start":2102,"line_end":2102,"column_start":47,"column_end":55},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":1785}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75596,"byte_end":75604,"line_start":2124,"line_end":2124,"column_start":50,"column_end":58},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":1789}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":75978,"byte_end":75986,"line_start":2140,"line_end":2140,"column_start":40,"column_end":48},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":3896}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":76570,"byte_end":76578,"line_start":2159,"line_end":2159,"column_start":34,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":3909}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77311,"byte_end":77319,"line_start":2180,"line_end":2180,"column_start":46,"column_end":54},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":3909}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77715,"byte_end":77723,"line_start":2194,"line_end":2194,"column_start":27,"column_end":35},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":2210}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":77957,"byte_end":77965,"line_start":2204,"line_end":2204,"column_start":60,"column_end":68},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/map.rs","byte_start":78330,"byte_end":78338,"line_start":2221,"line_end":2221,"column_start":22,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":2050}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90272,"byte_end":90280,"line_start":77,"line_end":77,"column_start":24,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1136},"to":{"krate":0,"index":1047}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":90749,"byte_end":90757,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91182,"byte_end":91190,"line_start":116,"line_end":116,"column_start":9,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":91623,"byte_end":91631,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":92829,"byte_end":92837,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":103773,"byte_end":103781,"line_start":531,"line_end":531,"column_start":12,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105439,"byte_end":105447,"line_start":579,"line_end":579,"column_start":22,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":769},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105544,"byte_end":105552,"line_start":585,"line_end":585,"column_start":33,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":769},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105696,"byte_end":105704,"line_start":591,"line_end":591,"column_start":31,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":769},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":105807,"byte_end":105815,"line_start":597,"line_end":597,"column_start":36,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":769},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106346,"byte_end":106350,"line_start":615,"line_end":615,"column_start":26,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106463,"byte_end":106467,"line_start":621,"line_end":621,"column_start":37,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106623,"byte_end":106627,"line_start":627,"line_end":627,"column_start":35,"column_end":39},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":3888}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106721,"byte_end":106725,"line_start":633,"line_end":633,"column_start":23,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":106875,"byte_end":106879,"line_start":641,"line_end":641,"column_start":40,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107364,"byte_end":107369,"line_start":658,"line_end":658,"column_start":26,"column_end":31},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":808},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107474,"byte_end":107479,"line_start":664,"line_end":664,"column_start":37,"column_end":42},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":808},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":107795,"byte_end":107803,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":3900}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108066,"byte_end":108074,"line_start":696,"line_end":696,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":3896}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108369,"byte_end":108377,"line_start":709,"line_end":709,"column_start":26,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":3909}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108628,"byte_end":108636,"line_start":720,"line_end":720,"column_start":34,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":3909}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":108917,"byte_end":108925,"line_start":731,"line_end":731,"column_start":24,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":2210}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109155,"byte_end":109163,"line_start":743,"line_end":743,"column_start":48,"column_end":56},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109377,"byte_end":109385,"line_start":754,"line_end":754,"column_start":19,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":2050}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":109452,"byte_end":109460,"line_start":761,"line_end":761,"column_start":12,"column_end":20},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":110813,"byte_end":110823,"line_start":807,"line_end":807,"column_start":29,"column_end":39},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111261,"byte_end":111271,"line_start":828,"line_end":828,"column_start":40,"column_end":50},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111585,"byte_end":111595,"line_start":843,"line_end":843,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":111765,"byte_end":111775,"line_start":852,"line_end":852,"column_start":31,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":874},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":112394,"byte_end":112406,"line_start":874,"line_end":874,"column_start":29,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":902},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":112843,"byte_end":112855,"line_start":895,"line_end":895,"column_start":40,"column_end":52},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":902},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":113168,"byte_end":113180,"line_start":910,"line_end":910,"column_start":26,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":902},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":113352,"byte_end":113364,"line_start":919,"line_end":919,"column_start":31,"column_end":43},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":902},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114045,"byte_end":114064,"line_start":940,"line_end":940,"column_start":34,"column_end":53},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":930},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114523,"byte_end":114542,"line_start":964,"line_end":964,"column_start":45,"column_end":64},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":930},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114747,"byte_end":114766,"line_start":975,"line_end":975,"column_start":31,"column_end":50},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":930},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":114935,"byte_end":114954,"line_start":983,"line_end":983,"column_start":36,"column_end":55},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":930},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":115563,"byte_end":115568,"line_start":1005,"line_end":1005,"column_start":29,"column_end":34},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":3602}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":115995,"byte_end":116000,"line_start":1028,"line_end":1028,"column_start":40,"column_end":45},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":3859}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":116173,"byte_end":116178,"line_start":1038,"line_end":1038,"column_start":26,"column_end":31},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/set.rs","byte_start":116323,"byte_end":116328,"line_start":1046,"line_end":1046,"column_start":31,"column_end":36},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":7573}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3147,"byte_end":3156,"line_start":101,"line_end":101,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3248,"byte_end":3257,"line_start":108,"line_end":108,"column_start":16,"column_end":25},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":2185}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3345,"byte_end":3354,"line_start":114,"line_end":114,"column_start":20,"column_end":29},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/palvferenc/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.3.1/src/lib.rs","byte_start":3556,"byte_end":3562,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1172},"to":{"krate":4294967295,"index":4294967295}}]}